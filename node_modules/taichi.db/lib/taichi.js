const fs = require("fs")
var fdb = "node_modules/taichi.db/db.json"
var db = JSON.parse(fs.readFileSync(fdb))
module.exports = {


get: function(value, value2, value3) {
refresh()
if (!value) {
throw new TypeError("PARAM MUST HAVE VALUE. RECEIVED UNDEFINED");
}
if (!db[value]) {
refresh(value)
}
if (value3) {
if (!db[value]) return;
if (!db[value][value2]) return;
if (!db[value][value2][value3]||db[value][value2][value3] == null) return;
 return db[value][value2][value3];
}
if (value2) {
if (!db[value]) return;
if (!db[value][value2]||db[value][value2] == null) return;
return  db[value][value2];
}
if (db[value] == null) return;
return db[value]
},

cdb: function(filename) {
if (filename === ""||filename === undefined) {
throw new TypeError('The "path" argument must be of type string or an instance of Buffer or URL. Received undefined');
return false;
}
if (filename) {
try {
db = JSON.parse(fs.readFileSync(filename))
} catch (error) {
return error;
}
refresh()
}
refresh()
fdb = filename
refresh()
return db;
},

set: function(name, value, value3, value4){
check(name)
check(value)
refresh()
if (value4) {
if (!db[name]) {
db[name] = {[value]: {[value3]: value4}}
return write()
}

 db[name][value][value3] = value4
return write();
}

if (value3) {
if (!db[name]) {
db[name] = {[value]: value3}
 db[name][value]= value3
write()
return}

 db[name][value] = value3
return write()
}

db[name] = value;
return write()
},

push: function(name, value){
check(name)
check(value)
refresh()

if (!db[name]) {
 db[name] = [value]
write()
return;}
db[name].push(value)
write()
},


all: function() {
  return db;
},

rem: function(value) {
check(value)
db[value] = undefined
write()
refresh()
},

import: async function(filename) {
check(filename)
var res = await JSON.parse(fs.readFileSync(filename))
await fs.writeFileSync(fdb, JSON.stringify(res), "utf8")
},

export: async function(filename) {
if (!filename) {
await fs.writeFileSync("taichi.db.json", JSON.stringify(db), "utf8")
return true}
await fs.writeFileSync(filename, JSON.stringify(db), "utf8")
}
}






//=========== THE AUTO FOCUS =============//





function check(val) {
if (val === ""||val === undefined) {
throw new TypeError("The Arguments must be of a type string. Received undefined");
return false}
refresh()
}

async function refresh(val) {
db = await JSON.parse(fs.readFileSync(fdb))
if(!val) return;
if (!db[val]) return;
return db[val];
}

async function write() {
await fs.writeFileSync(fdb, JSON.stringify(db), "utf8")
refresh()
}



setInterval(function() {

refresh()
}, 0)
